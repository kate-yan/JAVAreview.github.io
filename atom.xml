<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/kate-yan/JAVAreview.github.io</id>
    <title>Gridea</title>
    <updated>2020-04-01T09:40:55.644Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/kate-yan/JAVAreview.github.io"/>
    <link rel="self" href="https://github.com/kate-yan/JAVAreview.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://github.com/kate-yan/JAVAreview.github.io/images/avatar.png</logo>
    <icon>https://github.com/kate-yan/JAVAreview.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[JAVA集合之Collections工具类]]></title>
        <id>https://github.com/kate-yan/JAVAreview.github.io/post/java-ji-he-zhi-collections-gong-ju-lei/</id>
        <link href="https://github.com/kate-yan/JAVAreview.github.io/post/java-ji-he-zhi-collections-gong-ju-lei/">
        </link>
        <updated>2020-04-01T09:37:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="java集合之collections">JAVA集合之Collections</h1>
<p>Collections是JAVA中的一个类，是集合的工具类，提供多种方法供集合使用（Set、List、Map）,以下记录几种比较重要的方法。</p>
<h3 id="1-sort">1. sort</h3>
<p>  sort可以将List集合中的元素按照元素的比较顺序从小到大排列:如果集合中存放的是基础类型，则按照自然升序排列；如果集合中是自定义对象，则使用<code>sort()</code>必须继承Comparable接口。<br>
  注意：这里的<code>sort()</code>排序是稳定的。</p>
<pre><code class="language-java">//在Collections类中，调用sort()方法时传入或不传入比较器都调用List.sort();方法
@SuppressWarnings(&quot;unchecked&quot;)
public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list) {
    list.sort(null);//调用List.sort()
}

@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})
public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c) {
    list.sort(c);//调用List.sort()
}
</code></pre>
<p>  Collections里使用的<code>sort()</code>的实际上调用了<code>List.sort()</code>, 而<code>List.sort()</code>又调用了<code>Arrays.sort()</code>，那么下面让我们分析一下<code>Arrays.sort()</code>。</p>
<pre><code class="language-java">//在Arrays类中有许多重载的sort方法，这里显示的是Collections.sort()使用的方法
//不传入比较器的sort()方法
public static void sort(Object[] a) {
    if (LegacyMergeSort.userRequested)
        legacyMergeSort(a);
    else
        ComparableTimSort.sort(a, 0, a.length, null, 0, 0);
    }

//传入比较器的sort()方法
public static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c) {
    if (c == null) {
        sort(a);
    } else {
        if (LegacyMergeSort.userRequested)
            legacyMergeSort(a, c);
        else
            TimSort.sort(a, 0, a.length, c, null, 0, 0);
    }
}

//调用的归并排序算法，该方法在未来可能会被移除
private static &lt;T&gt; void legacyMergeSort(T[] a, Comparator&lt;? super T&gt; c) {
    T[] aux = a.clone();
    if (c==null)
        mergeSort(aux, a, 0, a.length, 0);
    else
        mergeSort(aux, a, 0, a.length, 0, c);
}

</code></pre>
<p>  可以看出如果<code>LegacyMergeSort.userRequested</code>为true的话，将使用归并排序；否则将使用<code>TimSort</code>排序算法。</p>
<h3 id="2binarysearch">2.binarySearch</h3>
<p>  使用<code>binarySearch</code>的集合必须已经是递增排序的。通过二分查找法寻找集合中是否存在target值，如果不存在则<strong>返回值=-(target值应该在集合中插入的位置+1)</strong>，存在则返回target在集合中的索引值。如果集合中存在重复元素，只能返回其中某一元素（第一个找到的元素）的下标，<strong>不能返回第一个元素的下标</strong>。</p>
<pre><code class="language-java">//Collection类下的binarySearch
public static &lt;T&gt;
int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) {
    if (list instanceof RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)
        //如果集合实现RandomAccess接口或者集合元素小于5000
        return Collections.indexedBinarySearch(list, key);
    else
        return Collections.iteratorBinarySearch(list, key);
}

private static &lt;T&gt;
int indexedBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) {
    int low = 0;
    int high = list.size()-1;

    while (low &lt;= high) {
        int mid = (low + high) &gt;&gt;&gt; 1;
        Comparable&lt;? super T&gt; midVal = list.get(mid);
        int cmp = midVal.compareTo(key);//使用compareTo进行比较

        if (cmp &lt; 0)
            low = mid + 1;
        else if (cmp &gt; 0)
            high = mid - 1;
        else
            return mid; 
    }
    return -(low + 1);  // 没找到，返回-（low+1）

}

private static &lt;T&gt;
int iteratorBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)
{
    int low = 0;
    int high = list.size()-1;
    //与indexedBinarySearch不同地方：使用集合的迭代器
    ListIterator&lt;? extends Comparable&lt;? super T&gt;&gt; i = list.listIterator();

    while (low &lt;= high) {
        int mid = (low + high) &gt;&gt;&gt; 1;
        Comparable&lt;? super T&gt; midVal = get(i, mid);
        int cmp = midVal.compareTo(key);

        if (cmp &lt; 0)
            low = mid + 1;
        else if (cmp &gt; 0)
            high = mid - 1;
        else
            return mid; 
    }
    return -(low + 1);  // 没找到，返回-（low+1）
}
</code></pre>
<h3 id="3shuffle">3.shuffle</h3>
<p>  <code>shuffle</code>将当前元素随机和前面的一个元素交换，从而得到一个随机化的列表。<br>
  若输入集合为链表的话，先转换为数组，shuffle后再转为链表。</p>
<pre><code class="language-java">public static void shuffle(List&lt;?&gt; list) {
    Random rnd = r;//生成Random类对象
    if (rnd == null)
        r = rnd = new Random(); 
    shuffle(list, rnd);

}

@SuppressWarnings({&quot;rawtypes&quot;, &quot;unchecked&quot;})
public static void shuffle(List&lt;?&gt; list, Random rnd) {
    int size = list.size();
    //如果传入list长度小于5或者list是RandomAccess，直接swap
    if (size &lt; SHUFFLE_THRESHOLD || list instanceof RandomAccess) {
        for (int i=size; i&gt;1; i--)
            swap(list, i-1, rnd.nextInt(i));
    } else {
        //将连边转化为Array
        Object arr[] = list.toArray();
        // Shuffle array
        for (int i=size; i&gt;1; i--)
            swap(arr, i-1, rnd.nextInt(i));
        //使用List的迭代器将数组转化回链表
        ListIterator it = list.listIterator();
        for (int i=0; i&lt;arr.length; i++) {
            it.next();
            it.set(arr[i]);
        }
    }
}
</code></pre>
<h3 id="5min和max">5.min和max</h3>
<p>通过过迭代器找最小值，唯一区别的是不同容器实现迭代的方式不同，也是性能影响的地方。</p>
<pre><code class="language-java">public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T min(Collection&lt;? extends T&gt; coll) {
    Iterator&lt;? extends T&gt; i = coll.iterator();
    T candidate = i.next();
    //使用迭代器进行集合元素遍历，两两比较
    while (i.hasNext()) {
        T next = i.next();
        if (next.compareTo(candidate) &lt; 0)
            candidate = next;
    }
    return candidate;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://github.com/kate-yan/JAVAreview.github.io/post/hello-gridea/</id>
        <link href="https://github.com/kate-yan/JAVAreview.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>